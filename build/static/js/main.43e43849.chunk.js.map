{"version":3,"sources":["components/InputDropdown.js","components/SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["InputDropdown","props","overlay","list","length","onClick","e","setQuery","key","debounce","handleChange","setList","map","name","Item","trigger","className","size","placeholder","title","value","query","onChange","target","preventDefault","RangePicker","DatePicker","convertData","object_arrays","Object","keys","el","i","internal_object","forEach","siftInfo","entries","result","entry","Carriers","Name","Places","Quotes","MinPrice","Carrier","Place","Price","Symbol","Currencies","searchPlaces","setPlaces","currency","a","endpoint","URLSearchParams","reqOptions","method","headers","process","useQueryString","fetch","response","status","json","names","place","PlaceName","ids","PlaceId","assign","callPlaces","SearchBar","useState","fromPlaces","setFromPlaces","toPlaces","setToPlaces","fromQuery","setFromQuery","toQuery","setToQuery","startDate","setStartDate","endDate","setEndDate","setCurrency","currencies","setCurrencies","align","justify","span","allowEmpty","onCalendarChange","moments","dates","currentCurrency","Code","overlayClassName","callPrices","searchCurrencies","from","to","setEntries","inbound","inboundpartialdate","callQuotes","findFlights","App","lowestPrice","prices","parseInt","Math","min","getLowestPrice","symbol","isFinite","dataSource","columns","getColumns","dataIndex","defaultSortOrder","sorter","x","y","sortDirections","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43e43849.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Input, Col, Menu, Dropdown } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\n// debounce function to prevent constant api calls\r\nimport { debounce } from \"lodash\";\r\n\r\n// styling\r\nimport \"./style/SearchBar.css\";\r\nimport \"./style/InputDropdown.css\";\r\n\r\nfunction InputDropdown(props) {\r\n    return (\r\n        <Col>\r\n            <Dropdown\r\n                overlay={\r\n                    props.list.length ? (\r\n                        <Menu\r\n                            onClick={(e) => {\r\n                                props.setQuery(e.key);\r\n                                debounce(\r\n                                    () =>\r\n                                        props.handleChange(\r\n                                            e.key,\r\n                                            props.setList\r\n                                        ),\r\n                                    200\r\n                                )();\r\n                            }}\r\n                        >\r\n                            {props.list.map((name) => (\r\n                                <Menu.Item key={name}>{name}</Menu.Item>\r\n                            ))}\r\n                        </Menu>\r\n                    ) : (\r\n                        <></>\r\n                    )\r\n                }\r\n                trigger=\"hover\"\r\n            >\r\n                <Input\r\n                    className=\"locationinput\"\r\n                    size={\"large\"}\r\n                    placeholder={props.title}\r\n                    value={props.query}\r\n                    onChange={(e) => {\r\n                        props.setQuery(e.target.value);\r\n                        e.preventDefault();\r\n                        debounce(\r\n                            () =>\r\n                                props.handleChange(\r\n                                    e.target.value,\r\n                                    props.setList\r\n                                ),\r\n                            200\r\n                        )();\r\n                    }}\r\n                />\r\n            </Dropdown>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default InputDropdown;\r\n","// react and ant design packages\nimport React, { useState } from \"react\";\nimport { Row, Col, DatePicker, Dropdown, Menu, Button } from \"antd\";\nimport \"antd/dist/antd.css\";\n\n// styling and inner components\nimport \"./style/SearchBar.css\";\nimport InputDropdown from \"./InputDropdown\";\n\nconst { RangePicker } = DatePicker;\n\n/**\n *\n * @param object_arrays is the original object of arrays that needs to be converted to an array of objects\n * @returns an array of objects\n */\nfunction convertData(object_arrays) {\n    let final_array = object_arrays[Object.keys(object_arrays)[0]].map(\n        (el, i) => {\n            let internal_object = {};\n            Object.keys(object_arrays).forEach(\n                (key) => (internal_object[key] = object_arrays[key][i])\n            );\n            return internal_object;\n        }\n    );\n    return final_array;\n}\n\n/**\n *\n * @param entries the response data that needs to be sifted\n * @returns the entries with only the data needed for the table\n */\nfunction siftInfo(entries) {\n    let result = [];\n    entries.forEach((entry, i) => {\n        if (\n            entry.Carriers?.Name &&\n            entry.Places?.Name &&\n            entry.Quotes?.MinPrice\n        ) {\n            result[i] = {\n                Carrier: entry.Carriers?.Name,\n                Place: entry.Places?.Name,\n                Price: entry.Quotes?.MinPrice,\n                Symbol: entry.Currencies?.Symbol,\n            };\n        }\n    });\n    return result;\n}\n\n/**\n * uses the skyscanner api to search for places with airports\n * @param e the search input to search for\n * @param setPlaces the function to set a list of places for the dropdown\n * @param currency the currency to use in the search\n */\nfunction searchPlaces(e, setPlaces, currency) {\n    currency = currency ? currency : \"USD\";\n    async function callPlaces() {\n        const endpoint =\n            `https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/US/${currency}/en-US/?` +\n            new URLSearchParams({ query: e });\n        const reqOptions = {\n            method: \"GET\",\n            headers: {\n                \"x-rapidapi-key\": `${process.env.REACT_APP_API_KEY}`,\n                \"x-rapidapi-host\":\n                    \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\n                useQueryString: true,\n            },\n        };\n\n        if (e) {\n            let response = await fetch(endpoint, reqOptions);\n            if (response.status === 200) {\n                response = await response.json();\n                let names = response.Places.map((place) => place.PlaceName);\n                let ids = response.Places.map((place) => place.PlaceId);\n                if (names.length && ids.length) {\n                    response = await Object.assign(\n                        ...names.map((name, i) => ({ [name]: ids[i] }))\n                    );\n                    setPlaces(response);\n                } else {\n                    setPlaces({});\n                }\n            } else {\n                setPlaces({});\n            }\n        } else {\n            setPlaces({});\n        }\n    }\n    callPlaces();\n}\n\n/**\n * uses the skyscanner api to get a list of currencies to choose from\n * @param setCurrencies the function to set the list of currencies for the dropdown\n */\nfunction searchCurrencies(setCurrencies) {\n    async function callPrices() {\n        const endpoint =\n            \"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/reference/v1.0/currencies\";\n        const reqOptions = {\n            method: \"GET\",\n            headers: {\n                \"x-rapidapi-key\": `${process.env.REACT_APP_API_KEY}`,\n                \"x-rapidapi-host\":\n                    \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\n                useQueryString: true,\n            },\n        };\n\n        let response = await fetch(endpoint, reqOptions);\n        if (response.status === 200) {\n            response = await response.json();\n            setCurrencies(response.Currencies);\n        }\n    }\n    callPrices();\n}\n\n/**\n * uses the skyscanner api to find quotes for flight routes\n * @param from the initial location to fly from\n * @param to the destination to fly to\n * @param startDate the outbound date for the first flight\n * @param endDate the optional inbound date for the return flight\n * @param currency the currency to return prices in\n * @param setEntries the function used to set the entries of the table\n */\nfunction findFlights(from, to, startDate, endDate, currency, setEntries) {\n    currency = currency ? currency : \"USD\";\n    async function callQuotes() {\n        const inbound = endDate\n            ? \"?\" + new URLSearchParams({ inboundpartialdate: endDate })\n            : \"\";\n        const endpoint =\n            `https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsequotes/v1.0/US/${currency}/en-US/${from}/${to}/${startDate}` +\n            inbound;\n        const reqOptions = {\n            method: \"GET\",\n            headers: {\n                \"x-rapidapi-key\": `${process.env.REACT_APP_API_KEY}`,\n                \"x-rapidapi-host\":\n                    \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\n            },\n        };\n        let response = await fetch(endpoint, reqOptions);\n        if (response.status === 200) {\n            response = await response.json();\n            setEntries(siftInfo(convertData(response)));\n        }\n    }\n\n    if (from && to) {\n        startDate = startDate || \"anytime\";\n        callQuotes();\n    }\n}\n\nfunction SearchBar(props) {\n    const [fromPlaces, setFromPlaces] = useState([]);\n    const [toPlaces, setToPlaces] = useState([]);\n    const [fromQuery, setFromQuery] = useState(\"\");\n    const [toQuery, setToQuery] = useState(\"\");\n    const [startDate, setStartDate] = useState(\"\");\n    const [endDate, setEndDate] = useState(\"\");\n    const [currency, setCurrency] = useState(\"\");\n    const [currencies, setCurrencies] = useState([]);\n\n    return (\n        <Row className=\"searchbar\" align=\"middle\" justify=\"space-around\">\n            <Col span={4}>\n                <InputDropdown\n                    title=\"From\"\n                    query={fromQuery}\n                    setQuery={setFromQuery}\n                    list={Object.keys(fromPlaces)}\n                    setList={setFromPlaces}\n                    handleChange={(e, setList) =>\n                        searchPlaces(e, setList, currency)\n                    }\n                />\n            </Col>\n            <Col span={4}>\n                <InputDropdown\n                    title=\"To\"\n                    query={toQuery}\n                    setQuery={setToQuery}\n                    list={Object.keys(toPlaces)}\n                    setList={setToPlaces}\n                    handleChange={(e, setList) =>\n                        searchPlaces(e, setList, currency)\n                    }\n                />\n            </Col>\n            <Col span={6}>\n                <RangePicker\n                    className=\"datepicker\"\n                    size={\"large\"}\n                    placeholder={[\"Departure Date\", \"Return Date\"]}\n                    allowEmpty={[false, true]}\n                    onCalendarChange={(moments, dates) => {\n                        setStartDate(dates[0]);\n                        setEndDate(dates[1]);\n                    }}\n                />\n            </Col>\n            <Col span={4}>\n                <Dropdown\n                    overlay={\n                        currencies.length ? (\n                            <Menu onClick={(e) => setCurrency(e.key)}>\n                                {currencies.map((currentCurrency) => (\n                                    <Menu.Item key={currentCurrency.Code}>\n                                        {currentCurrency.Code}\n                                    </Menu.Item>\n                                ))}\n                            </Menu>\n                        ) : (\n                            <></>\n                        )\n                    }\n                    overlayClassName=\"currencyselector\"\n                    trigger={[\"click\"]}\n                >\n                    <Button\n                        className=\"currencybutton\"\n                        size={\"large\"}\n                        onClick={() => {\n                            searchCurrencies(setCurrencies);\n                        }}\n                    >\n                        {currency ? currency : \"Select Currency\"}\n                    </Button>\n                </Dropdown>\n            </Col>\n            <Col span={2} className=\"submitcontainer\">\n                <Button\n                    className=\"submitbutton\"\n                    size={\"large\"}\n                    onClick={() => {\n                        findFlights(\n                            fromPlaces[fromQuery],\n                            toPlaces[toQuery],\n                            startDate,\n                            endDate,\n                            currency,\n                            props.setEntries\n                        );\n                    }}\n                >\n                    Submit\n                </Button>\n            </Col>\n        </Row>\n    );\n}\n\nexport default SearchBar;\n","import React, { useState } from \"react\";\nimport { Table } from \"antd\";\n\nimport \"./App.css\";\nimport SearchBar from \"./components/SearchBar\";\n\nexport default function App() {\n    // entries variable stores the data for the table of flights\n    const [entries, setEntries] = useState([]);\n    const lowestPrice = getLowestPrice(entries);\n\n    var symbol = entries[0]?.Symbol ? entries[0]?.Symbol : \"\";\n\n    function setSymbol(newSymbol) {\n        symbol = newSymbol;\n    }\n\n    return (\n        <div className=\"App\">\n            {/* SearchBar for input fields */}\n            <SearchBar setEntries={setEntries}></SearchBar>\n            {isFinite(lowestPrice) ? (\n                <div className=\"lowestprice\">\n                    Lowest Price!!! {symbol + lowestPrice}\n                </div>\n            ) : (\n                <></>\n            )}\n            {/* Table to display data of flights and prices */}\n            <Table\n                className=\"table\"\n                dataSource={entries}\n                columns={getColumns(entries, symbol)}\n            ></Table>\n        </div>\n    );\n}\n\n/**\n *\n * @param entries is used to get the currency symbol\n * @returns the array of columns needed for the table\n */\nfunction getColumns(entries, symbol) {\n    const columns = [\n        {\n            title: \"Carrier\",\n            dataIndex: \"Carrier\",\n            key: \"Carrier\",\n        },\n        {\n            title: \"Departure Location\",\n            dataIndex: \"Place\",\n            key: \"Place\",\n        },\n        {\n            title: `Price (${symbol})`,\n            dataIndex: \"Price\",\n            key: \"Price\",\n            defaultSortOrder: \"ascend\",\n            sorter: (x, y) => x.Price - y.Price,\n            sortDirections: [\"descend\", \"ascend\"],\n        },\n    ];\n    return columns;\n}\n\n/**\n *\n * @param entries the entries of the table to find the prices from\n * @returns the lowest price found\n */\nfunction getLowestPrice(entries) {\n    let prices = [];\n    entries.forEach((entry, i) => (prices[i] = parseInt(entry.Price)));\n    return Math.min(...prices);\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}